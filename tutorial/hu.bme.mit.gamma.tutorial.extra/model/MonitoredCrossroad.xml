<nta>
<declaration>


bool isStable = false;

bool toRaise_LightInputs_displayGreenOfmonitor;

bool isRaised_LightInputs_displayGreenOfmonitor;

bool toRaise_PoliceInterrupt_policeOfcrossroad_secondary;

bool isRaised_PoliceInterrupt_policeOfcrossroad_secondary;

bool toRaise_LightInputs_displayNoneOfmonitor;

bool isRaised_LightInputs_displayNoneOfmonitor;

bool toRaise_Control_toggleOfcrossroad_prior;

bool isRaised_Control_toggleOfcrossroad_prior;

bool toRaise_PoliceInterrupt_policeOfcrossroad_prior;

bool isRaised_PoliceInterrupt_policeOfcrossroad_prior;

bool toRaise_Control_toggleOfcrossroad_secondary;

bool isRaised_Control_toggleOfcrossroad_secondary;

bool toRaise_LightInputs_displayRedOfmonitor;

bool isRaised_LightInputs_displayRedOfmonitor;

bool toRaise_PoliceInterrupt_policeOfcrossroad_controller;

bool isRaised_PoliceInterrupt_policeOfcrossroad_controller;

bool toRaise_LightInputs_displayYellowOfmonitor;

bool isRaised_LightInputs_displayYellowOfmonitor;

bool LightCommands_displayRedOfcrossroad_secondary;

bool LightCommands_displayNoneOfcrossroad_secondary;

bool LightCommands_displayGreenOfcrossroad_secondary;

bool LightCommands_displayRedOfcrossroad_prior;

bool LightCommands_displayYellowOfcrossroad_secondary;

bool LightCommands_displayYellowOfcrossroad_prior;

bool LightCommands_displayGreenOfcrossroad_prior;

bool LightCommands_displayNoneOfcrossroad_prior;

bool Error_errorOfmonitor;

broadcast chan runCycleMain_regionOfStatechartOfcrossroad_prior;

bool isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior;

broadcast chan runCycleMain_regionOfStatechartOfmonitor;

bool isScheduledmain_regionOfStatechartOfmonitorOfmonitor;

broadcast chan runCycleNormalOfNormalOfcrossroad_prior;

bool isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior;

broadcast chan runCycleOperatingOfOperatingOfcrossroad_controller;

bool isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller;

broadcast chan runCycleInterruptedOfInterruptedOfcrossroad_prior;

bool isScheduledinterruptedOfInterruptedOfcrossroad_priorOfcrossroad_prior;

broadcast chan runCycleNormalOfNormalOfcrossroad_secondary;

bool isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary;

broadcast chan runCycleInterruptedOfInterruptedOfcrossroad_secondary;

bool isScheduledinterruptedOfInterruptedOfcrossroad_secondaryOfcrossroad_secondary;

broadcast chan runCycleMain_regionOfStatechartOfcrossroad_secondary;

bool isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary;

broadcast chan runCycleMain_regionOfStatechartOfcrossroad_controller;

bool isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller;

clock timer0;

bool PriorityTimeout4ofcrossroad_controller = true;

bool InitTimeout2ofcrossroad_controller = true;

bool SecondaryPreparesTimeout3ofcrossroad_controller = true;

bool SecondaryTimeout5ofcrossroad_controller = true;

clock timer1;

bool BlinkingYellowTimeout4ofcrossroad_prior = true;

bool BlackTimeout3ofcrossroad_prior = true;

clock timer2;

bool BlinkingYellowTimeout4ofcrossroad_secondary = true;

bool PriorityPreparesTimeout6ofcrossroad_controller = true;

bool BlackTimeout3ofcrossroad_secondary = true;

broadcast chan entryChanOfNormal15;

broadcast chan entryChanOfInterrupted16;

broadcast chan entryChanOfOperating17;

broadcast chan entryChanOfInterrupted18;

broadcast chan entryChanOfNormal19;

broadcast chan exitChanOfNormal15;

broadcast chan exitChanOfOperating16;

broadcast chan exitChanOfInterrupted17;

broadcast chan exitChanOfNormal18;

broadcast chan exitChanOfInterrupted19;

void clearOutEvents15() {
	LightCommands_displayYellowOfcrossroad_prior = false;
	LightCommands_displayRedOfcrossroad_secondary = false;
	LightCommands_displayNoneOfcrossroad_secondary = false;
	Error_errorOfmonitor = false;
	LightCommands_displayRedOfcrossroad_prior = false;
	LightCommands_displayNoneOfcrossroad_prior = false;
	LightCommands_displayYellowOfcrossroad_secondary = false;
	LightCommands_displayGreenOfcrossroad_secondary = false;
	LightCommands_displayGreenOfcrossroad_prior = false;
}

void resetClocks17() {
	if (((((PriorityPreparesTimeout6ofcrossroad_controller &amp;&amp; SecondaryTimeout5ofcrossroad_controller) &amp;&amp; PriorityTimeout4ofcrossroad_controller) &amp;&amp; SecondaryPreparesTimeout3ofcrossroad_controller) &amp;&amp; InitTimeout2ofcrossroad_controller))
		timer0 = 0;
	if ((BlackTimeout3ofcrossroad_prior &amp;&amp; BlinkingYellowTimeout4ofcrossroad_prior))
		timer1 = 0;
	if ((BlinkingYellowTimeout4ofcrossroad_secondary &amp;&amp; BlackTimeout3ofcrossroad_secondary))
		timer2 = 0;
}

</declaration>
<template>
<name>
main_regionOfStatechartOfcrossroad_prior
</name>
<location id="Entry2">
<name>
Entry2
</name>
<committed/>
</location>

<location id="Interrupted">
<name>
Interrupted
</name>
</location>

<location id="entryOfInterrupted">
<name>
entryOfInterrupted
</name>
<committed/>
</location>

<location id="Normal">
<name>
Normal
</name>
</location>

<location id="entryOfNormal">
<name>
entryOfNormal
</name>
<committed/>
</location>

<location id="exitOfNormal18">
<name>
exitOfNormal18
</name>
<committed/>
</location>

<location id="exitOfInterrupted19">
<name>
exitOfInterrupted19
</name>
<committed/>
</location>
<init ref="Entry2"/>

<transition>
<source ref="entryOfInterrupted"/>
<target ref="Interrupted"/>
<label kind="synchronisation">entryChanOfInterrupted16!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="entryOfNormal"/>
<target ref="Normal"/>
<label kind="synchronisation">entryChanOfNormal15!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="Interrupted"/>
<target ref="exitOfInterrupted19"/>
<label kind="guard">isRaised_PoliceInterrupt_policeOfcrossroad_prior</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_prior?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Entry2"/>
<target ref="entryOfNormal"/>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Normal"/>
<target ref="exitOfNormal18"/>
<label kind="guard">isRaised_PoliceInterrupt_policeOfcrossroad_prior</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_prior?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="exitOfNormal18"/>
<target ref="entryOfInterrupted"/>
<label kind="synchronisation">exitChanOfNormal18!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="exitOfInterrupted19"/>
<target ref="entryOfNormal"/>
<label kind="synchronisation">exitChanOfInterrupted19!</label>
<label kind="assignment"></label>
</transition>
</template>

<template>
<name>
main_regionOfStatechartOfmonitor
</name>
<location id="Entry0">
<name>
Entry0
</name>
<committed/>
</location>

<location id="Error">
<name>
Error
</name>
</location>

<location id="Red">
<name>
Red
</name>
</location>

<location id="Other">
<name>
Other
</name>
</location>

<location id="Green">
<name>
Green
</name>
</location>
<init ref="Entry0"/>

<transition>
<source ref="Entry0"/>
<target ref="Other"/>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="Other"/>
<label kind="guard">(!((!(isRaised_LightInputs_displayRedOfmonitor) &amp;&amp; (!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayNoneOfmonitor))) &amp;&amp; (!((!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayRedOfmonitor)) &amp;&amp; (!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayYellowOfmonitor)))</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="Other"/>
<label kind="guard">(!(isRaised_LightInputs_displayNoneOfmonitor) &amp;&amp; (!(isRaised_LightInputs_displayRedOfmonitor) &amp;&amp; (!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayYellowOfmonitor)))</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="Error"/>
<label kind="guard">isRaised_LightInputs_displayGreenOfmonitor</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true,
Error_errorOfmonitor = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="Green"/>
<label kind="guard">isRaised_LightInputs_displayGreenOfmonitor</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="Other"/>
<label kind="guard">(!(isRaised_LightInputs_displayRedOfmonitor) &amp;&amp; (!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayNoneOfmonitor))</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Other"/>
<target ref="Green"/>
<label kind="guard">isRaised_LightInputs_displayGreenOfmonitor</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="Error"/>
<label kind="guard">(!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayRedOfmonitor)</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true,
Error_errorOfmonitor = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="Red"/>
<label kind="guard">(!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayRedOfmonitor)</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="Other"/>
<label kind="guard">(!(isRaised_LightInputs_displayRedOfmonitor) &amp;&amp; (!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayNoneOfmonitor))</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>

<transition>
<source ref="Other"/>
<target ref="Red"/>
<label kind="guard">(!(isRaised_LightInputs_displayGreenOfmonitor) &amp;&amp; isRaised_LightInputs_displayRedOfmonitor)</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfmonitorOfmonitor = true</label>
</transition>
</template>

<template>
<name>
normalOfNormalOfcrossroad_prior
</name>
<declaration>
bool isActive;
</declaration>
<location id="Entry1">
<name>
Entry1
</name>
<committed/>
</location>

<location id="GenInitLocation4">
<name>
GenInitLocation4
</name>
</location>

<location id="Red">
<name>
Red
</name>
</location>

<location id="entryOfRed">
<name>
entryOfRed
</name>
<committed/>
</location>

<location id="Yellow">
<name>
Yellow
</name>
</location>

<location id="entryOfYellow">
<name>
entryOfYellow
</name>
<committed/>
</location>

<location id="Green">
<name>
Green
</name>
</location>

<location id="entryOfGreen">
<name>
entryOfGreen
</name>
<committed/>
</location>
<init ref="GenInitLocation4"/>

<transition>
<source ref="entryOfRed"/>
<target ref="Red"/>
<label kind="assignment">toRaise_LightInputs_displayRedOfmonitor = true,
LightCommands_displayRedOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="entryOfYellow"/>
<target ref="Yellow"/>
<label kind="assignment">toRaise_LightInputs_displayYellowOfmonitor = true,
LightCommands_displayYellowOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="entryOfGreen"/>
<target ref="Green"/>
<label kind="assignment">toRaise_LightInputs_displayGreenOfmonitor = true,
LightCommands_displayGreenOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="entryOfGreen"/>
<label kind="guard">(isActive &amp;&amp; isRaised_Control_toggleOfcrossroad_prior)</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_prior?</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Yellow"/>
<target ref="entryOfRed"/>
<label kind="guard">(isActive &amp;&amp; isRaised_Control_toggleOfcrossroad_prior)</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_prior?</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="entryOfYellow"/>
<label kind="guard">(isActive &amp;&amp; isRaised_Control_toggleOfcrossroad_prior)</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_prior?</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Entry1"/>
<target ref="entryOfRed"/>
<label kind="guard">isActive</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="entryOfGreen"/>
<label kind="synchronisation">entryChanOfNormal15?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Yellow"/>
<target ref="entryOfYellow"/>
<label kind="synchronisation">entryChanOfNormal15?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="entryOfRed"/>
<label kind="synchronisation">entryChanOfNormal15?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="GenInitLocation4"/>
<target ref="Entry1"/>
<label kind="synchronisation">entryChanOfNormal15?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="Green"/>
<label kind="synchronisation">exitChanOfNormal18?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Yellow"/>
<target ref="Yellow"/>
<label kind="synchronisation">exitChanOfNormal18?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="Red"/>
<label kind="synchronisation">exitChanOfNormal18?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="GenInitLocation4"/>
<target ref="GenInitLocation4"/>
<label kind="synchronisation">exitChanOfNormal18?</label>
<label kind="assignment">isActive = false</label>
</transition>
</template>

<template>
<name>
operatingOfOperatingOfcrossroad_controller
</name>
<declaration>
bool isActive;
</declaration>
<location id="Entry0">
<name>
Entry0
</name>
<committed/>
</location>

<location id="GenInitLocation6">
<name>
GenInitLocation6
</name>
</location>

<location id="SecondaryPrepares">
<name>
SecondaryPrepares
</name>
</location>

<location id="entryOfSecondaryPrepares">
<name>
entryOfSecondaryPrepares
</name>
<committed/>
</location>

<location id="Init">
<name>
Init
</name>
</location>

<location id="entryOfInit">
<name>
entryOfInit
</name>
<committed/>
</location>

<location id="Priority">
<name>
Priority
</name>
</location>

<location id="entryOfPriority">
<name>
entryOfPriority
</name>
<committed/>
</location>

<location id="Secondary">
<name>
Secondary
</name>
</location>

<location id="entryOfSecondary">
<name>
entryOfSecondary
</name>
<committed/>
</location>

<location id="PriorityPrepares">
<name>
PriorityPrepares
</name>
</location>

<location id="entryOfPriorityPrepares">
<name>
entryOfPriorityPrepares
</name>
<committed/>
</location>
<init ref="GenInitLocation6"/>

<transition>
<source ref="entryOfSecondaryPrepares"/>
<target ref="SecondaryPrepares"/>
<label kind="assignment">toRaise_Control_toggleOfcrossroad_secondary = true,
timer0 = 0,
SecondaryPreparesTimeout3ofcrossroad_controller = false</label>
</transition>

<transition>
<source ref="entryOfInit"/>
<target ref="Init"/>
<label kind="assignment">toRaise_Control_toggleOfcrossroad_prior = true,
timer0 = 0,
InitTimeout2ofcrossroad_controller = false</label>
</transition>

<transition>
<source ref="entryOfPriority"/>
<target ref="Priority"/>
<label kind="assignment">toRaise_Control_toggleOfcrossroad_secondary = true,
toRaise_Control_toggleOfcrossroad_prior = true,
timer0 = 0,
PriorityTimeout4ofcrossroad_controller = false</label>
</transition>

<transition>
<source ref="entryOfSecondary"/>
<target ref="Secondary"/>
<label kind="assignment">toRaise_Control_toggleOfcrossroad_secondary = true,
toRaise_Control_toggleOfcrossroad_prior = true,
timer0 = 0,
SecondaryTimeout5ofcrossroad_controller = false</label>
</transition>

<transition>
<source ref="entryOfPriorityPrepares"/>
<target ref="PriorityPrepares"/>
<label kind="assignment">toRaise_Control_toggleOfcrossroad_prior = true,
timer0 = 0,
PriorityPreparesTimeout6ofcrossroad_controller = false</label>
</transition>

<transition>
<source ref="SecondaryPrepares"/>
<target ref="entryOfPriority"/>
<label kind="guard">(isActive &amp;&amp; SecondaryPreparesTimeout3ofcrossroad_controller)</label>
<label kind="synchronisation">runCycleOperatingOfOperatingOfcrossroad_controller?</label>
<label kind="assignment">isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Entry0"/>
<target ref="entryOfInit"/>
<label kind="guard">isActive</label>
<label kind="assignment">isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Init"/>
<target ref="entryOfPriorityPrepares"/>
<label kind="guard">(isActive &amp;&amp; InitTimeout2ofcrossroad_controller)</label>
<label kind="synchronisation">runCycleOperatingOfOperatingOfcrossroad_controller?</label>
<label kind="assignment">isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="PriorityPrepares"/>
<target ref="entryOfSecondary"/>
<label kind="guard">(isActive &amp;&amp; PriorityPreparesTimeout6ofcrossroad_controller)</label>
<label kind="synchronisation">runCycleOperatingOfOperatingOfcrossroad_controller?</label>
<label kind="assignment">isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Secondary"/>
<target ref="entryOfSecondaryPrepares"/>
<label kind="guard">(isActive &amp;&amp; SecondaryTimeout5ofcrossroad_controller)</label>
<label kind="synchronisation">runCycleOperatingOfOperatingOfcrossroad_controller?</label>
<label kind="assignment">isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Priority"/>
<target ref="entryOfPriorityPrepares"/>
<label kind="guard">(isActive &amp;&amp; PriorityTimeout4ofcrossroad_controller)</label>
<label kind="synchronisation">runCycleOperatingOfOperatingOfcrossroad_controller?</label>
<label kind="assignment">isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Priority"/>
<target ref="entryOfPriority"/>
<label kind="synchronisation">entryChanOfOperating17?</label>
<label kind="assignment">isActive = true,
isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="SecondaryPrepares"/>
<target ref="entryOfSecondaryPrepares"/>
<label kind="synchronisation">entryChanOfOperating17?</label>
<label kind="assignment">isActive = true,
isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="PriorityPrepares"/>
<target ref="entryOfPriorityPrepares"/>
<label kind="synchronisation">entryChanOfOperating17?</label>
<label kind="assignment">isActive = true,
isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Secondary"/>
<target ref="entryOfSecondary"/>
<label kind="synchronisation">entryChanOfOperating17?</label>
<label kind="assignment">isActive = true,
isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="GenInitLocation6"/>
<target ref="Entry0"/>
<label kind="synchronisation">entryChanOfOperating17?</label>
<label kind="assignment">isActive = true,
isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Init"/>
<target ref="entryOfInit"/>
<label kind="synchronisation">entryChanOfOperating17?</label>
<label kind="assignment">isActive = true,
isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="Priority"/>
<target ref="Priority"/>
<label kind="synchronisation">exitChanOfOperating16?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="SecondaryPrepares"/>
<target ref="SecondaryPrepares"/>
<label kind="synchronisation">exitChanOfOperating16?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="PriorityPrepares"/>
<target ref="PriorityPrepares"/>
<label kind="synchronisation">exitChanOfOperating16?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Secondary"/>
<target ref="Secondary"/>
<label kind="synchronisation">exitChanOfOperating16?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="GenInitLocation6"/>
<target ref="GenInitLocation6"/>
<label kind="synchronisation">exitChanOfOperating16?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Init"/>
<target ref="Init"/>
<label kind="synchronisation">exitChanOfOperating16?</label>
<label kind="assignment">isActive = false</label>
</transition>
</template>

<template>
<name>
interruptedOfInterruptedOfcrossroad_prior
</name>
<declaration>
bool isActive;
</declaration>
<location id="Entry0">
<name>
Entry0
</name>
<committed/>
</location>

<location id="GenInitLocation7">
<name>
GenInitLocation7
</name>
</location>

<location id="Black">
<name>
Black
</name>
</location>

<location id="entryOfBlack">
<name>
entryOfBlack
</name>
<committed/>
</location>

<location id="BlinkingYellow">
<name>
BlinkingYellow
</name>
</location>

<location id="entryOfBlinkingYellow">
<name>
entryOfBlinkingYellow
</name>
<committed/>
</location>
<init ref="GenInitLocation7"/>

<transition>
<source ref="entryOfBlack"/>
<target ref="Black"/>
<label kind="assignment">toRaise_LightInputs_displayNoneOfmonitor = true,
LightCommands_displayNoneOfcrossroad_prior = true,
timer1 = 0,
BlackTimeout3ofcrossroad_prior = false</label>
</transition>

<transition>
<source ref="entryOfBlinkingYellow"/>
<target ref="BlinkingYellow"/>
<label kind="assignment">toRaise_LightInputs_displayYellowOfmonitor = true,
LightCommands_displayYellowOfcrossroad_prior = true,
timer1 = 0,
BlinkingYellowTimeout4ofcrossroad_prior = false</label>
</transition>

<transition>
<source ref="Entry0"/>
<target ref="entryOfBlinkingYellow"/>
<label kind="guard">isActive</label>
<label kind="assignment">isScheduledinterruptedOfInterruptedOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="BlinkingYellow"/>
<target ref="entryOfBlack"/>
<label kind="guard">(isActive &amp;&amp; BlinkingYellowTimeout4ofcrossroad_prior)</label>
<label kind="synchronisation">runCycleInterruptedOfInterruptedOfcrossroad_prior?</label>
<label kind="assignment">isScheduledinterruptedOfInterruptedOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Black"/>
<target ref="entryOfBlinkingYellow"/>
<label kind="guard">(isActive &amp;&amp; BlackTimeout3ofcrossroad_prior)</label>
<label kind="synchronisation">runCycleInterruptedOfInterruptedOfcrossroad_prior?</label>
<label kind="assignment">isScheduledinterruptedOfInterruptedOfcrossroad_priorOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="GenInitLocation7"/>
<target ref="Entry0"/>
<label kind="synchronisation">entryChanOfInterrupted16?</label>
<label kind="assignment">isActive = true</label>
</transition>

<transition>
<source ref="BlinkingYellow"/>
<target ref="Entry0"/>
<label kind="synchronisation">entryChanOfInterrupted16?</label>
<label kind="assignment">isActive = true</label>
</transition>

<transition>
<source ref="Black"/>
<target ref="Entry0"/>
<label kind="synchronisation">entryChanOfInterrupted16?</label>
<label kind="assignment">isActive = true</label>
</transition>

<transition>
<source ref="GenInitLocation7"/>
<target ref="GenInitLocation7"/>
<label kind="synchronisation">exitChanOfInterrupted19?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="BlinkingYellow"/>
<target ref="GenInitLocation7"/>
<label kind="synchronisation">exitChanOfInterrupted19?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Black"/>
<target ref="GenInitLocation7"/>
<label kind="synchronisation">exitChanOfInterrupted19?</label>
<label kind="assignment">isActive = false</label>
</transition>
</template>

<template>
<name>
normalOfNormalOfcrossroad_secondary
</name>
<declaration>
bool isActive;
</declaration>
<location id="Entry1">
<name>
Entry1
</name>
<committed/>
</location>

<location id="GenInitLocation5">
<name>
GenInitLocation5
</name>
</location>

<location id="Red">
<name>
Red
</name>
</location>

<location id="entryOfRed">
<name>
entryOfRed
</name>
<committed/>
</location>

<location id="Yellow">
<name>
Yellow
</name>
</location>

<location id="entryOfYellow">
<name>
entryOfYellow
</name>
<committed/>
</location>

<location id="Green">
<name>
Green
</name>
</location>

<location id="entryOfGreen">
<name>
entryOfGreen
</name>
<committed/>
</location>
<init ref="GenInitLocation5"/>

<transition>
<source ref="entryOfRed"/>
<target ref="Red"/>
<label kind="assignment">LightCommands_displayRedOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="entryOfYellow"/>
<target ref="Yellow"/>
<label kind="assignment">LightCommands_displayYellowOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="entryOfGreen"/>
<target ref="Green"/>
<label kind="assignment">LightCommands_displayGreenOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Yellow"/>
<target ref="entryOfRed"/>
<label kind="guard">(isActive &amp;&amp; isRaised_Control_toggleOfcrossroad_secondary)</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_secondary?</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="entryOfGreen"/>
<label kind="guard">(isActive &amp;&amp; isRaised_Control_toggleOfcrossroad_secondary)</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_secondary?</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Entry1"/>
<target ref="entryOfRed"/>
<label kind="guard">isActive</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="entryOfYellow"/>
<label kind="guard">(isActive &amp;&amp; isRaised_Control_toggleOfcrossroad_secondary)</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_secondary?</label>
<label kind="assignment">isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="entryOfGreen"/>
<label kind="synchronisation">entryChanOfNormal19?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="GenInitLocation5"/>
<target ref="Entry1"/>
<label kind="synchronisation">entryChanOfNormal19?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Yellow"/>
<target ref="entryOfYellow"/>
<label kind="synchronisation">entryChanOfNormal19?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="entryOfRed"/>
<label kind="synchronisation">entryChanOfNormal19?</label>
<label kind="assignment">isActive = true,
isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Green"/>
<target ref="Green"/>
<label kind="synchronisation">exitChanOfNormal15?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="GenInitLocation5"/>
<target ref="GenInitLocation5"/>
<label kind="synchronisation">exitChanOfNormal15?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Yellow"/>
<target ref="Yellow"/>
<label kind="synchronisation">exitChanOfNormal15?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Red"/>
<target ref="Red"/>
<label kind="synchronisation">exitChanOfNormal15?</label>
<label kind="assignment">isActive = false</label>
</transition>
</template>

<template>
<name>
interruptedOfInterruptedOfcrossroad_secondary
</name>
<declaration>
bool isActive;
</declaration>
<location id="Entry0">
<name>
Entry0
</name>
<committed/>
</location>

<location id="GenInitLocation3">
<name>
GenInitLocation3
</name>
</location>

<location id="BlinkingYellow">
<name>
BlinkingYellow
</name>
</location>

<location id="entryOfBlinkingYellow">
<name>
entryOfBlinkingYellow
</name>
<committed/>
</location>

<location id="Black">
<name>
Black
</name>
</location>

<location id="entryOfBlack">
<name>
entryOfBlack
</name>
<committed/>
</location>
<init ref="GenInitLocation3"/>

<transition>
<source ref="entryOfBlinkingYellow"/>
<target ref="BlinkingYellow"/>
<label kind="assignment">LightCommands_displayYellowOfcrossroad_secondary = true,
timer2 = 0,
BlinkingYellowTimeout4ofcrossroad_secondary = false</label>
</transition>

<transition>
<source ref="entryOfBlack"/>
<target ref="Black"/>
<label kind="assignment">LightCommands_displayNoneOfcrossroad_secondary = true,
timer2 = 0,
BlackTimeout3ofcrossroad_secondary = false</label>
</transition>

<transition>
<source ref="Entry0"/>
<target ref="entryOfBlinkingYellow"/>
<label kind="guard">isActive</label>
<label kind="assignment">isScheduledinterruptedOfInterruptedOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="BlinkingYellow"/>
<target ref="entryOfBlack"/>
<label kind="guard">(isActive &amp;&amp; BlinkingYellowTimeout4ofcrossroad_secondary)</label>
<label kind="synchronisation">runCycleInterruptedOfInterruptedOfcrossroad_secondary?</label>
<label kind="assignment">isScheduledinterruptedOfInterruptedOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Black"/>
<target ref="entryOfBlinkingYellow"/>
<label kind="guard">(isActive &amp;&amp; BlackTimeout3ofcrossroad_secondary)</label>
<label kind="synchronisation">runCycleInterruptedOfInterruptedOfcrossroad_secondary?</label>
<label kind="assignment">isScheduledinterruptedOfInterruptedOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="BlinkingYellow"/>
<target ref="Entry0"/>
<label kind="synchronisation">entryChanOfInterrupted18?</label>
<label kind="assignment">isActive = true</label>
</transition>

<transition>
<source ref="GenInitLocation3"/>
<target ref="Entry0"/>
<label kind="synchronisation">entryChanOfInterrupted18?</label>
<label kind="assignment">isActive = true</label>
</transition>

<transition>
<source ref="Black"/>
<target ref="Entry0"/>
<label kind="synchronisation">entryChanOfInterrupted18?</label>
<label kind="assignment">isActive = true</label>
</transition>

<transition>
<source ref="BlinkingYellow"/>
<target ref="GenInitLocation3"/>
<label kind="synchronisation">exitChanOfInterrupted17?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="GenInitLocation3"/>
<target ref="GenInitLocation3"/>
<label kind="synchronisation">exitChanOfInterrupted17?</label>
<label kind="assignment">isActive = false</label>
</transition>

<transition>
<source ref="Black"/>
<target ref="GenInitLocation3"/>
<label kind="synchronisation">exitChanOfInterrupted17?</label>
<label kind="assignment">isActive = false</label>
</transition>
</template>

<template>
<name>
main_regionOfStatechartOfcrossroad_secondary
</name>
<location id="Entry2">
<name>
Entry2
</name>
<committed/>
</location>

<location id="Interrupted">
<name>
Interrupted
</name>
</location>

<location id="entryOfInterrupted">
<name>
entryOfInterrupted
</name>
<committed/>
</location>

<location id="Normal">
<name>
Normal
</name>
</location>

<location id="entryOfNormal">
<name>
entryOfNormal
</name>
<committed/>
</location>

<location id="exitOfNormal15">
<name>
exitOfNormal15
</name>
<committed/>
</location>

<location id="exitOfInterrupted17">
<name>
exitOfInterrupted17
</name>
<committed/>
</location>
<init ref="Entry2"/>

<transition>
<source ref="entryOfInterrupted"/>
<target ref="Interrupted"/>
<label kind="synchronisation">entryChanOfInterrupted18!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="entryOfNormal"/>
<target ref="Normal"/>
<label kind="synchronisation">entryChanOfNormal19!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="Entry2"/>
<target ref="entryOfNormal"/>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Normal"/>
<target ref="exitOfNormal15"/>
<label kind="guard">isRaised_PoliceInterrupt_policeOfcrossroad_secondary</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_secondary?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Interrupted"/>
<target ref="exitOfInterrupted17"/>
<label kind="guard">isRaised_PoliceInterrupt_policeOfcrossroad_secondary</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_secondary?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="exitOfNormal15"/>
<target ref="entryOfInterrupted"/>
<label kind="synchronisation">exitChanOfNormal15!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="exitOfInterrupted17"/>
<target ref="entryOfNormal"/>
<label kind="synchronisation">exitChanOfInterrupted17!</label>
<label kind="assignment"></label>
</transition>
</template>

<template>
<name>
main_regionOfStatechartOfcrossroad_controller
</name>
<location id="Entry1">
<name>
Entry1
</name>
<committed/>
</location>

<location id="Interrupted">
<name>
Interrupted
</name>
</location>

<location id="Operating">
<name>
Operating
</name>
</location>

<location id="entryOfOperating">
<name>
entryOfOperating
</name>
<committed/>
</location>

<location id="exitOfOperating16">
<name>
exitOfOperating16
</name>
<committed/>
</location>
<init ref="Entry1"/>

<transition>
<source ref="entryOfOperating"/>
<target ref="Operating"/>
<label kind="synchronisation">entryChanOfOperating17!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="Operating"/>
<target ref="exitOfOperating16"/>
<label kind="guard">isRaised_PoliceInterrupt_policeOfcrossroad_controller</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_controller?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller = true,
toRaise_PoliceInterrupt_policeOfcrossroad_prior = true,
toRaise_PoliceInterrupt_policeOfcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="Interrupted"/>
<target ref="entryOfOperating"/>
<label kind="guard">isRaised_PoliceInterrupt_policeOfcrossroad_controller</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_controller?</label>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller = true,
toRaise_PoliceInterrupt_policeOfcrossroad_secondary = true,
toRaise_PoliceInterrupt_policeOfcrossroad_prior = true</label>
</transition>

<transition>
<source ref="Entry1"/>
<target ref="entryOfOperating"/>
<label kind="assignment">isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller = true</label>
</transition>

<transition>
<source ref="exitOfOperating16"/>
<target ref="Interrupted"/>
<label kind="synchronisation">exitChanOfOperating16!</label>
<label kind="assignment"></label>
</transition>
</template>

<template>
<name>
ClockTemplate
</name>
<location id="initLoc">
<name>
initLoc
</name>
<label kind="invariant">
(((((((((BlackTimeout3ofcrossroad_prior || (timer1 &lt;= 500)) &amp;&amp; (BlinkingYellowTimeout4ofcrossroad_prior || (timer1 &lt;= 500))) &amp;&amp; (PriorityTimeout4ofcrossroad_controller || (timer0 &lt;= (2 * 1000)))) &amp;&amp; (SecondaryPreparesTimeout3ofcrossroad_controller || (timer0 &lt;= (1 * 1000)))) &amp;&amp; (BlinkingYellowTimeout4ofcrossroad_secondary || (timer2 &lt;= 500))) &amp;&amp; (BlackTimeout3ofcrossroad_secondary || (timer2 &lt;= 500))) &amp;&amp; (PriorityPreparesTimeout6ofcrossroad_controller || (timer0 &lt;= (1 * 1000)))) &amp;&amp; (SecondaryTimeout5ofcrossroad_controller || (timer0 &lt;= (2 * 1000)))) &amp;&amp; (InitTimeout2ofcrossroad_controller || (timer0 &lt;= (2 * 1000))))
</label>
</location>
<init ref="initLoc"/>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(BlackTimeout3ofcrossroad_prior) &amp;&amp; (timer1 >= 500)))</label>
<label kind="assignment">BlackTimeout3ofcrossroad_prior = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(BlinkingYellowTimeout4ofcrossroad_prior) &amp;&amp; (timer1 >= 500)))</label>
<label kind="assignment">BlinkingYellowTimeout4ofcrossroad_prior = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(PriorityTimeout4ofcrossroad_controller) &amp;&amp; (timer0 >= (2 * 1000))))</label>
<label kind="assignment">PriorityTimeout4ofcrossroad_controller = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(SecondaryPreparesTimeout3ofcrossroad_controller) &amp;&amp; (timer0 >= (1 * 1000))))</label>
<label kind="assignment">SecondaryPreparesTimeout3ofcrossroad_controller = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(BlinkingYellowTimeout4ofcrossroad_secondary) &amp;&amp; (timer2 >= 500)))</label>
<label kind="assignment">BlinkingYellowTimeout4ofcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(BlackTimeout3ofcrossroad_secondary) &amp;&amp; (timer2 >= 500)))</label>
<label kind="assignment">BlackTimeout3ofcrossroad_secondary = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(PriorityPreparesTimeout6ofcrossroad_controller) &amp;&amp; (timer0 >= (1 * 1000))))</label>
<label kind="assignment">PriorityPreparesTimeout6ofcrossroad_controller = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(SecondaryTimeout5ofcrossroad_controller) &amp;&amp; (timer0 >= (2 * 1000))))</label>
<label kind="assignment">SecondaryTimeout5ofcrossroad_controller = true</label>
</transition>

<transition>
<source ref="initLoc"/>
<target ref="initLoc"/>
<label kind="guard">(isStable &amp;&amp; (!(InitTimeout2ofcrossroad_controller) &amp;&amp; (timer0 >= (2 * 1000))))</label>
<label kind="assignment">InitTimeout2ofcrossroad_controller = true</label>
</transition>
</template>

<template>
<name>
MonitoredCrossroadOrchestrator0
</name>
<declaration>
clock timerOrchestrator16;
</declaration>
<location id="InitLoc">
<name>
InitLoc
</name>
<label kind="invariant">
(timerOrchestrator16 &lt;= 2000)
</label>
</location>

<location id="swapLocation1">
<name>
swapLocation1
</name>
<urgent/>
</location>

<location id="RunMain_regionOfStatechartOfcrossroad_controller2">
<name>
RunMain_regionOfStatechartOfcrossroad_controller2
</name>
<urgent/>
</location>

<location id="RunOperatingOfOperatingOfcrossroad_controller3">
<name>
RunOperatingOfOperatingOfcrossroad_controller3
</name>
<urgent/>
</location>

<location id="finalizing4crossroad_controller">
<name>
finalizing4crossroad_controller
</name>
<urgent/>
</location>

<location id="RunMain_regionOfStatechartOfcrossroad_prior5">
<name>
RunMain_regionOfStatechartOfcrossroad_prior5
</name>
<urgent/>
</location>

<location id="RunNormalOfNormalOfcrossroad_prior6">
<name>
RunNormalOfNormalOfcrossroad_prior6
</name>
<urgent/>
</location>

<location id="RunInterruptedOfInterruptedOfcrossroad_prior7">
<name>
RunInterruptedOfInterruptedOfcrossroad_prior7
</name>
<urgent/>
</location>

<location id="finalizing8crossroad_prior">
<name>
finalizing8crossroad_prior
</name>
<urgent/>
</location>

<location id="RunMain_regionOfStatechartOfcrossroad_secondary9">
<name>
RunMain_regionOfStatechartOfcrossroad_secondary9
</name>
<urgent/>
</location>

<location id="RunNormalOfNormalOfcrossroad_secondary10">
<name>
RunNormalOfNormalOfcrossroad_secondary10
</name>
<urgent/>
</location>

<location id="RunInterruptedOfInterruptedOfcrossroad_secondary11">
<name>
RunInterruptedOfInterruptedOfcrossroad_secondary11
</name>
<urgent/>
</location>

<location id="finalizing12crossroad_secondary">
<name>
finalizing12crossroad_secondary
</name>
<urgent/>
</location>

<location id="RunMain_regionOfStatechartOfmonitor13">
<name>
RunMain_regionOfStatechartOfmonitor13
</name>
<urgent/>
</location>

<location id="finalizing14monitor">
<name>
finalizing14monitor
</name>
<urgent/>
</location>

<location id="final">
<name>
final
</name>
<urgent/>
</location>

<location id="notIsStable">
<name>
notIsStable
</name>
<urgent/>
</location>
<init ref="notIsStable"/>

<transition>
<source ref="InitLoc"/>
<target ref="swapLocation1"/>
<label kind="assignment">clearOutEvents15(),
isStable = false,
isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior = false,
isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary = false,
isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller = false,
isScheduledmain_regionOfStatechartOfmonitorOfmonitor = false,
isScheduledinterruptedOfInterruptedOfcrossroad_priorOfcrossroad_prior = false,
isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller = false,
isScheduledinterruptedOfInterruptedOfcrossroad_secondaryOfcrossroad_secondary = false,
isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior = false,
isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary = false,
timerOrchestrator16 = 0,
resetClocks17()</label>
</transition>

<transition>
<source ref="swapLocation1"/>
<target ref="RunMain_regionOfStatechartOfcrossroad_controller2"/>
<label kind="assignment">isRaised_Control_toggleOfcrossroad_secondary = toRaise_Control_toggleOfcrossroad_secondary,
toRaise_Control_toggleOfcrossroad_secondary = false,
isRaised_PoliceInterrupt_policeOfcrossroad_secondary = toRaise_PoliceInterrupt_policeOfcrossroad_secondary,
toRaise_PoliceInterrupt_policeOfcrossroad_secondary = false,
isRaised_PoliceInterrupt_policeOfcrossroad_controller = toRaise_PoliceInterrupt_policeOfcrossroad_controller,
toRaise_PoliceInterrupt_policeOfcrossroad_controller = false,
isRaised_PoliceInterrupt_policeOfcrossroad_prior = toRaise_PoliceInterrupt_policeOfcrossroad_prior,
toRaise_PoliceInterrupt_policeOfcrossroad_prior = false,
isRaised_Control_toggleOfcrossroad_prior = toRaise_Control_toggleOfcrossroad_prior,
toRaise_Control_toggleOfcrossroad_prior = false,
isRaised_LightInputs_displayRedOfmonitor = toRaise_LightInputs_displayRedOfmonitor,
toRaise_LightInputs_displayRedOfmonitor = false,
isRaised_LightInputs_displayNoneOfmonitor = toRaise_LightInputs_displayNoneOfmonitor,
toRaise_LightInputs_displayNoneOfmonitor = false,
isRaised_LightInputs_displayYellowOfmonitor = toRaise_LightInputs_displayYellowOfmonitor,
toRaise_LightInputs_displayYellowOfmonitor = false,
isRaised_LightInputs_displayGreenOfmonitor = toRaise_LightInputs_displayGreenOfmonitor,
toRaise_LightInputs_displayGreenOfmonitor = false</label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfcrossroad_controller2"/>
<target ref="RunOperatingOfOperatingOfcrossroad_controller3"/>
<label kind="guard">!(isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller)</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_controller!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfcrossroad_controller2"/>
<target ref="RunOperatingOfOperatingOfcrossroad_controller3"/>
<label kind="guard">isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunOperatingOfOperatingOfcrossroad_controller3"/>
<target ref="finalizing4crossroad_controller"/>
<label kind="guard">!((isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller || isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller))</label>
<label kind="synchronisation">runCycleOperatingOfOperatingOfcrossroad_controller!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunOperatingOfOperatingOfcrossroad_controller3"/>
<target ref="finalizing4crossroad_controller"/>
<label kind="guard">(isScheduledmain_regionOfStatechartOfcrossroad_controllerOfcrossroad_controller || isScheduledoperatingOfOperatingOfcrossroad_controllerOfcrossroad_controller)</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="finalizing4crossroad_controller"/>
<target ref="RunMain_regionOfStatechartOfcrossroad_prior5"/>
<label kind="assignment">isRaised_PoliceInterrupt_policeOfcrossroad_controller = false</label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfcrossroad_prior5"/>
<target ref="RunNormalOfNormalOfcrossroad_prior6"/>
<label kind="guard">!(isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior)</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_prior!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfcrossroad_prior5"/>
<target ref="RunNormalOfNormalOfcrossroad_prior6"/>
<label kind="guard">isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunNormalOfNormalOfcrossroad_prior6"/>
<target ref="RunInterruptedOfInterruptedOfcrossroad_prior7"/>
<label kind="guard">!((isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior || isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior))</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_prior!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunNormalOfNormalOfcrossroad_prior6"/>
<target ref="RunInterruptedOfInterruptedOfcrossroad_prior7"/>
<label kind="guard">(isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior || isSchedulednormalOfNormalOfcrossroad_priorOfcrossroad_prior)</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunInterruptedOfInterruptedOfcrossroad_prior7"/>
<target ref="finalizing8crossroad_prior"/>
<label kind="guard">!((isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior || isScheduledinterruptedOfInterruptedOfcrossroad_priorOfcrossroad_prior))</label>
<label kind="synchronisation">runCycleInterruptedOfInterruptedOfcrossroad_prior!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunInterruptedOfInterruptedOfcrossroad_prior7"/>
<target ref="finalizing8crossroad_prior"/>
<label kind="guard">(isScheduledmain_regionOfStatechartOfcrossroad_priorOfcrossroad_prior || isScheduledinterruptedOfInterruptedOfcrossroad_priorOfcrossroad_prior)</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="finalizing8crossroad_prior"/>
<target ref="RunMain_regionOfStatechartOfcrossroad_secondary9"/>
<label kind="assignment">isRaised_PoliceInterrupt_policeOfcrossroad_prior = false,
isRaised_Control_toggleOfcrossroad_prior = false</label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfcrossroad_secondary9"/>
<target ref="RunNormalOfNormalOfcrossroad_secondary10"/>
<label kind="guard">!(isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary)</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfcrossroad_secondary!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfcrossroad_secondary9"/>
<target ref="RunNormalOfNormalOfcrossroad_secondary10"/>
<label kind="guard">isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunNormalOfNormalOfcrossroad_secondary10"/>
<target ref="RunInterruptedOfInterruptedOfcrossroad_secondary11"/>
<label kind="guard">!((isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary || isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary))</label>
<label kind="synchronisation">runCycleNormalOfNormalOfcrossroad_secondary!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunNormalOfNormalOfcrossroad_secondary10"/>
<target ref="RunInterruptedOfInterruptedOfcrossroad_secondary11"/>
<label kind="guard">(isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary || isSchedulednormalOfNormalOfcrossroad_secondaryOfcrossroad_secondary)</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunInterruptedOfInterruptedOfcrossroad_secondary11"/>
<target ref="finalizing12crossroad_secondary"/>
<label kind="guard">!((isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary || isScheduledinterruptedOfInterruptedOfcrossroad_secondaryOfcrossroad_secondary))</label>
<label kind="synchronisation">runCycleInterruptedOfInterruptedOfcrossroad_secondary!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunInterruptedOfInterruptedOfcrossroad_secondary11"/>
<target ref="finalizing12crossroad_secondary"/>
<label kind="guard">(isScheduledmain_regionOfStatechartOfcrossroad_secondaryOfcrossroad_secondary || isScheduledinterruptedOfInterruptedOfcrossroad_secondaryOfcrossroad_secondary)</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="finalizing12crossroad_secondary"/>
<target ref="RunMain_regionOfStatechartOfmonitor13"/>
<label kind="assignment">isRaised_Control_toggleOfcrossroad_secondary = false,
isRaised_PoliceInterrupt_policeOfcrossroad_secondary = false</label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfmonitor13"/>
<target ref="finalizing14monitor"/>
<label kind="guard">!(isScheduledmain_regionOfStatechartOfmonitorOfmonitor)</label>
<label kind="synchronisation">runCycleMain_regionOfStatechartOfmonitor!</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="RunMain_regionOfStatechartOfmonitor13"/>
<target ref="finalizing14monitor"/>
<label kind="guard">isScheduledmain_regionOfStatechartOfmonitorOfmonitor</label>
<label kind="assignment"></label>
</transition>

<transition>
<source ref="finalizing14monitor"/>
<target ref="final"/>
<label kind="assignment">isRaised_LightInputs_displayRedOfmonitor = false,
isRaised_LightInputs_displayNoneOfmonitor = false,
isRaised_LightInputs_displayYellowOfmonitor = false,
isRaised_LightInputs_displayGreenOfmonitor = false</label>
</transition>

<transition>
<source ref="final"/>
<target ref="InitLoc"/>
<label kind="assignment">isStable = true</label>
</transition>

<transition>
<source ref="notIsStable"/>
<target ref="InitLoc"/>
<label kind="assignment">isStable = true</label>
</transition>
</template>

<template>
<name>
Environment
</name>
<location id="InitLoc">
<name>
InitLoc
</name>
</location>
<init ref="InitLoc"/>

<transition>
<source ref="InitLoc"/>
<target ref="InitLoc"/>
<label kind="guard">(isStable &amp;&amp; !(toRaise_PoliceInterrupt_policeOfcrossroad_controller))</label>
<label kind="assignment">toRaise_PoliceInterrupt_policeOfcrossroad_controller = true</label>
</transition>
</template>
<system>
	P_main_regionOfStatechartOfcrossroad_prior = main_regionOfStatechartOfcrossroad_prior();
	
	P_main_regionOfStatechartOfmonitor = main_regionOfStatechartOfmonitor();
	
	P_normalOfNormalOfcrossroad_prior = normalOfNormalOfcrossroad_prior();
	
	P_operatingOfOperatingOfcrossroad_controller = operatingOfOperatingOfcrossroad_controller();
	
	P_interruptedOfInterruptedOfcrossroad_prior = interruptedOfInterruptedOfcrossroad_prior();
	
	P_normalOfNormalOfcrossroad_secondary = normalOfNormalOfcrossroad_secondary();
	
	P_interruptedOfInterruptedOfcrossroad_secondary = interruptedOfInterruptedOfcrossroad_secondary();
	
	P_main_regionOfStatechartOfcrossroad_secondary = main_regionOfStatechartOfcrossroad_secondary();
	
	P_main_regionOfStatechartOfcrossroad_controller = main_regionOfStatechartOfcrossroad_controller();
	
	P_ClockTemplate = ClockTemplate();
	
	P_MonitoredCrossroadOrchestrator0 = MonitoredCrossroadOrchestrator0();
	
	P_Environment = Environment();
	system P_main_regionOfStatechartOfcrossroad_prior, P_main_regionOfStatechartOfmonitor, P_normalOfNormalOfcrossroad_prior, P_operatingOfOperatingOfcrossroad_controller, P_interruptedOfInterruptedOfcrossroad_prior, P_normalOfNormalOfcrossroad_secondary, P_interruptedOfInterruptedOfcrossroad_secondary, P_main_regionOfStatechartOfcrossroad_secondary, P_main_regionOfStatechartOfcrossroad_controller, P_ClockTemplate, P_MonitoredCrossroadOrchestrator0, P_Environment;
</system>
		</nta>
