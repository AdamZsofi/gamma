package Controller
import "Interfaces"
statechart ControllerStatechart [
	port PriorityControl : provides Control,
	port SecondaryPolice : provides PoliceInterrupt,
	port PriorityPolice : provides PoliceInterrupt,
	port PoliceInterrupt : requires PoliceInterrupt,
	port SecondaryControl : provides Control
] {
	timeout PriorityTimeout2
	timeout InitTimeout3
	timeout SecondaryTimeout4
	timeout SecondaryPreparesTimeout5
	timeout PriorityPreparesTimeout6
	transition from SecondaryPrepares to Priority when timeout SecondaryPreparesTimeout5
	transition from Interrupted to Operating when PoliceInterrupt.police / raise SecondaryPolice.police; raise
	PriorityPolice.police
	transition from Entry1 to Init
	transition from Priority to PriorityPrepares when timeout PriorityTimeout2
	transition from Operating to Interrupted when PoliceInterrupt.police / raise SecondaryPolice.police; raise
	PriorityPolice.police
	transition from Init to PriorityPrepares when timeout InitTimeout3
	transition from PriorityPrepares to Secondary when timeout PriorityPreparesTimeout6
	transition from Secondary to SecondaryPrepares when timeout SecondaryTimeout4
	transition from Entry0 to Operating
	region main_region {
		state Operating {
			region operating {
				shallow history Entry1
				state PriorityPrepares {
					entry / set PriorityPreparesTimeout6 := 1 s; raise PriorityControl.toggle
				}
				state Priority {
					entry / set PriorityTimeout2 := 2 s; raise SecondaryControl.toggle; raise PriorityControl.toggle
				}
				state Init {
					entry / set InitTimeout3 := 2 s; raise PriorityControl.toggle
				}
				state Secondary {
					entry / set SecondaryTimeout4 := 2 s; raise SecondaryControl.toggle; raise PriorityControl.toggle
				}
				state SecondaryPrepares {
					entry / set SecondaryPreparesTimeout5 := 1 s; raise SecondaryControl.toggle
				}
			}
		}
		initial Entry0
		state Interrupted
	}
}