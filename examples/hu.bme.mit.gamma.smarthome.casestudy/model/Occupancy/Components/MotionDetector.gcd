package occupancy

import "Interfaces/Constants.gcd"
import "Interfaces/Interfaces.gcd"

statechart MotionDetector(selfDefense : boolean) [
	port MotionDetector : requires MotionDetector
	port Motion : provides Motion
	port Activation : provides InternalActivation
] {
	timeout timeoutTime
	timeout expectedDelayTime
	timeout temporarilyOffTime
	
	var temporarilyOff : boolean := false
	var relayedMotionCount : integer := 0
	
	region main {
		initial Entry
		state On {
			region operationRegion {
				initial OperationEntry
				state Idle
				state SensedMotion {
					entry / set timeoutTime := TIMEOUT_TIME s;
				}
			}
			region selfDefenseRegion {
				initial SelfDefenseEntry
				state Count {
					entry / set expectedDelayTime := EXPECTED_DELAY_TIME s;
				}
				choice OverheatChoice
			}
		}
		state TemporarilyOff {
			entry / set temporarilyOffTime := TEMPORARILY_OFF_TIME s;
				temporarilyOff := true;
			exit / temporarilyOff := false;
		}
		state Off
	}
	
	transition from Entry to Off
	
	transition from OperationEntry to Idle
	transition from Idle to SensedMotion when MotionDetector.motion /
		raise Motion.motion(true);
	transition from SensedMotion to SensedMotion when MotionDetector.motion
	transition from SensedMotion to Idle when timeout timeoutTime /
		raise Motion.motion(false);
	
	transition from SelfDefenseEntry to Count
	transition from Count to OverheatChoice when MotionDetector.motion [selfDefense] /
		relayedMotionCount := relayedMotionCount + 1;
	transition from OverheatChoice to Count [
		relayedMotionCount < MAXIMUM_RELAYED_MOTION_COUNT]
//	transition from OverheatChoice to TemporarilyOff [else]
	transition from Count to Count when timeout expectedDelayTime [selfDefense] /
		relayedMotionCount := relayedMotionCount - 1;
	
	transition from TemporarilyOff to On when Activation.activate
	transition from TemporarilyOff to On when timeout temporarilyOffTime /
		relayedMotionCount := 0;
	transition from TemporarilyOff to Off when Activation.deactivate
	
	transition from On to Off when Activation.deactivate
	transition from Off to On when Activation.activate
}